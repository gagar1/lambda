plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'com.diffplug.spotless' version '5.0.0'
}

group = 'com.uk.ls.insurance.service'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    awsSdkVersion = '2.33.10'
    sqsSdkVersion = '1.12.791'
    assertJVersion = '3.27.4'
    jsonAssertjVersion = '3.0.25'
    moshiVersion = '1.15.2'
    daggerVersion = '2.57.1'
    log4jVersion = '2.25.1'
    retrofitVersion = '3.0.0'
    cucumberVersion = '7.28.2'
    springVersion = '6.2.11'
    jsonSmartVersion = '2.6.0'
    junitJupiterVersion = '5.13.4'
    junitPlatformVersion = '1.13.4'
}

dependencies {
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation platform("org.apache.logging.log4j:log4j-bom:$log4jVersion")
    implementation platform("software.amazon.awssdk:bom:$awsSdkVersion")
    implementation platform("uk.co.capitalone.services:secret-retriever-bom:9.9.2")
    implementation "com.amazonaws:aws-java-sdk-sqs:$sqsSdkVersion"
    implementation "software.amazon.awssdk:lambda"
    implementation "software.amazon.awssdk:dynamodb"
    implementation "software.amazon.awssdk:url-connection-client"
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.okhttp3:okhttp:5.0.0"
}

test {
    useJUnitPlatform()
}

// --- Checkstyle Configuration ---
checkstyle {
    toolVersion = '10.12.5' // Specify tool version
    configFile = file("config/checkstyle/checkstyle.xml") // Point to your config file
    maxErrors = 0
    maxWarnings = 0
}

// Ensure the 'checkstyle' task runs as part of the main 'check' lifecycle
tasks.withType(Checkstyle) {
    // Assuming you use 'main' and 'test' source sets
    group = 'verification'
    reports {
        xml.required = true
        html.required = true
    }
}

// --- PMD Configuration ---
pmd {
    toolVersion = '6.55.0' // Specify tool version
    rulesetFiles = files("config/pmd/pmd-ruleset.xml") // Point to your ruleset
    ruleSets = [] // Empty to use the files above
    // Exclude test sources from PMD if you only want to check main code
    ignoreFailures = false
}

// Ensure the 'pmd' task runs as part of the main 'check' lifecycle
tasks.withType(Pmd) {
    group = 'verification'
    reports {
        xml.required = true
        html.required = true
    }
}
// --- Spotless Configuration ---
spotless {
    java {
        // Enforce the Google Java Format
        googleJavaFormat()
        // OR enforce Eclipse formatting with a custom config file
        // eclipse().configFile('config/spotless/eclipse-formatter.xml')

        // Ensure all files have a license header
        licenseHeaderFile project.file('config/spotless/license-header.txt')

        // Tidy up imports (optional but recommended)
        removeUnusedImports()
    }

    // You can also add configuration for other languages like Kotlin or Gradle files
}
